<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ColorFactory Pro | Industrial Color Matching</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@300;400;500&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Source Code Pro', monospace;
            background-color: #f8fafc;
            color: #1e293b;
        }
        .color-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        .gradient-bg {
            background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
        }
        .formula-card {
            background: rgba(255,255,255,0.7);
            backdrop-filter: blur(10px);
        }
        .secure-color-input {
            -webkit-appearance: none;
            appearance: none;
            width: 100%;
            height: 48px;
            background: transparent;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 0;
            cursor: pointer;
        }
        .secure-color-input::-webkit-color-swatch {
            border-radius: 6px;
            border: none;
        }
        .secure-color-input::-moz-color-swatch {
            border-radius: 6px;
            border: none;
        }
        ::-webkit-scrollbar {
            width: 6px;
        }
        ::-webkit-scrollbar-track {
            background: #e2e8f0;
        }
        ::-webkit-scrollbar-thumb {
            background: #94a3b8;
            border-radius: 3px;
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="mb-12">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl md:text-3xl font-medium tracking-tight">
                    <span class="text-cyan-600">Color</span><span class="text-purple-600">Factory</span> <span class="text-sm bg-cyan-600 text-white px-2 py-1 rounded ml-2">PRO</span>
                </h1>
                <div class="text-xs md:text-sm opacity-70">
                    <span id="datetime" class="font-mono"></span>
                </div>
            </div>
            <p class="mt-2 text-sm opacity-60">Industrial Color Matching & Formulation System v3.1.0</p>
        </header>

        <!-- Main App -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Color Input Section -->
            <div class="lg:col-span-2 space-y-6">
                <div class="bg-white p-6 rounded-xl border border-gray-200 shadow-sm">
                    <h2 class="text-lg mb-4 flex items-center">
                        <span class="w-3 h-3 rounded-full bg-cyan-600 mr-2"></span>
                        Secure Color Input
                    </h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div>
                            <label class="block text-sm mb-1 opacity-70">Reference Color</label>
                            <div class="relative">
                                <input type="color" id="baseColor" value="#3b82f6" class="secure-color-input">
                                <div class="absolute inset-0 pointer-events-none flex items-center justify-center">
                                    <span class="text-xs bg-white px-2 py-1 rounded border border-gray-200">Secure Input</span>
                                </div>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm mb-1 opacity-70">Tolerance Level</label>
                            <input type="range" id="tolerance" min="0" max="100" value="15" class="w-full">
                            <div class="flex justify-between text-xs mt-1 opacity-50">
                                <span>0%</span>
                                <span id="toleranceValue">15%</span>
                                <span>100%</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                        <button id="matchBtn" class="bg-cyan-600 hover:bg-cyan-500 text-white py-2 px-4 rounded text-sm transition shadow-sm">
                            Match Colors
                        </button>
                        <button id="generateBtn" class="bg-purple-600 hover:bg-purple-500 text-white py-2 px-4 rounded text-sm transition shadow-sm">
                            Generate Variants
                        </button>
                        <button id="randomBtn" class="bg-gray-600 hover:bg-gray-500 text-white py-2 px-4 rounded text-sm transition shadow-sm">
                            Randomize
                        </button>
                        <button id="saveBtn" class="border border-gray-300 hover:bg-gray-100 text-gray-700 py-2 px-4 rounded text-sm transition shadow-sm">
                            Save Formula
                        </button>
                    </div>
                </div>
                
                <!-- Color Details & Formula -->
                <div class="bg-white p-6 rounded-xl border border-gray-200 shadow-sm">
                    <h2 class="text-lg mb-4 flex items-center">
                        <span class="w-3 h-3 rounded-full bg-purple-600 mr-2"></span>
                        Color Specifications & Formula
                    </h2>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                        <div>
                            <p class="text-xs opacity-50">HEX</p>
                            <p id="hexValue" class="font-mono">#3b82f6</p>
                        </div>
                        <div>
                            <p class="text-xs opacity-50">RGB</p>
                            <p id="rgbValue" class="font-mono">59, 130, 246</p>
                        </div>
                        <div>
                            <p class="text-xs opacity-50">CMYK</p>
                            <p id="cmykValue" class="font-mono">76, 47, 0, 4</p>
                        </div>
                        <div>
                            <p class="text-xs opacity-50">Pantone</p>
                            <p id="pantoneValue" class="font-mono">PMS 2728 C</p>
                        </div>
                    </div>
                    
                    <div id="formulaContainer" class="mt-4 p-4 rounded-lg formula-card border border-gray-200">
                        <h3 class="text-sm font-medium mb-2 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                            </svg>
                            Pigment Paste Formula
                        </h3>
                        <div id="formulaContent" class="text-sm font-mono space-y-1">
                            <p>• Titanium Dioxide: 42%</p>
                            <p>• Phthalo Blue: 31%</p>
                            <p>• Ultramarine Blue: 18%</p>
                            <p>• Carbon Black: 5%</p>
                            <p>• Extender: 4%</p>
                            <p class="mt-2 text-xs opacity-70">Base: Water-based acrylic resin</p>
                        </div>
                    </div>
                </div>
                
                <!-- Shade Cards -->
                <div class="bg-white p-6 rounded-xl border border-gray-200 shadow-sm">
                    <h2 class="text-lg mb-4 flex items-center">
                        <span class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></span>
                        Shade Cards
                    </h2>
                    <div id="shadeCards" class="grid grid-cols-2 md:grid-cols-3 gap-4">
                        <!-- Shade cards will be generated here -->
                        <div class="border border-gray-200 rounded-lg overflow-hidden">
                            <div class="h-24 bg-blue-500"></div>
                            <div class="p-3">
                                <p class="text-xs font-medium">Standard</p>
                                <p class="text-xs opacity-70 font-mono">#3b82f6</p>
                            </div>
                        </div>
                        <div class="border border-gray-200 rounded-lg overflow-hidden">
                            <div class="h-24 bg-blue-400"></div>
                            <div class="p-3">
                                <p class="text-xs font-medium">Light</p>
                                <p class="text-xs opacity-70 font-mono">#60a5fa</p>
                            </div>
                        </div>
                        <div class="border border-gray-200 rounded-lg overflow-hidden">
                            <div class="h-24 bg-blue-600"></div>
                            <div class="p-3">
                                <p class="text-xs font-medium">Dark</p>
                                <p class="text-xs opacity-70 font-mono">#2563eb</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Color Palette -->
            <div class="lg:col-span-1">
                <div class="bg-white p-6 rounded-xl border border-gray-200 shadow-sm h-full">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg flex items-center">
                            <span class="w-3 h-3 rounded-full bg-green-500 mr-2"></span>
                            Color Palette
                        </h2>
                        <span id="paletteCount" class="text-xs bg-gray-100 px-2 py-1 rounded">5 colors</span>
                    </div>
                    
                    <div id="colorPalette" class="space-y-3">
                        <!-- Color cards will be generated here -->
                        <div class="color-card bg-blue-500 h-16 rounded-lg flex items-end p-3 transition-all duration-200">
                            <div class="text-xs bg-white bg-opacity-80 px-2 py-1 rounded">
                                <span class="font-mono">#3b82f6</span>
                            </div>
                        </div>
                        <div class="color-card bg-blue-400 h-16 rounded-lg flex items-end p-3 transition-all duration-200">
                            <div class="text-xs bg-white bg-opacity-80 px-2 py-1 rounded">
                                <span class="font-mono">#60a5fa</span>
                            </div>
                        </div>
                        <div class="color-card bg-blue-600 h-16 rounded-lg flex items-end p-3 transition-all duration-200">
                            <div class="text-xs bg-white bg-opacity-80 px-2 py-1 rounded">
                                <span class="font-mono">#2563eb</span>
                            </div>
                        </div>
                        <div class="color-card bg-indigo-500 h-16 rounded-lg flex items-end p-3 transition-all duration-200">
                            <div class="text-xs bg-white bg-opacity-80 px-2 py-1 rounded">
                                <span class="font-mono">#6366f1</span>
                            </div>
                        </div>
                        <div class="color-card bg-cyan-500 h-16 rounded-lg flex items-end p-3 transition-all duration-200">
                            <div class="text-xs bg-white bg-opacity-80 px-2 py-1 rounded">
                                <span class="font-mono">#06b6d4</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 pt-4 border-t border-gray-200">
                        <div class="flex justify-between text-sm mb-2">
                            <span class="opacity-70">Database Status:</span>
                            <span class="text-green-600 font-mono">Secure Connection</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="opacity-70">Color Variants:</span>
                            <span class="font-mono">∞ (encrypted)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Console -->
        <div class="mt-8 bg-white p-4 rounded-xl border border-gray-200 shadow-sm">
            <div class="flex items-center mb-2">
                <div class="flex space-x-2 mr-3">
                    <span class="w-3 h-3 rounded-full bg-red-500"></span>
                    <span class="w-3 h-3 rounded-full bg-yellow-500"></span>
                    <span class="w-3 h-3 rounded-full bg-green-500"></span>
                </div>
                <span class="text-sm opacity-70">SYSTEM CONSOLE</span>
                <span class="ml-auto text-xs bg-gray-100 px-2 py-1 rounded">AES-256 Encrypted</span>
            </div>
            <div id="console" class="font-mono text-sm h-24 overflow-y-auto p-2 bg-gray-50 rounded">
                <p>> System initialized with secure protocols...</p>
                <p>> Connected to encrypted color database</p>
                <p>> Ready for industrial color formulation</p>
            </div>
        </div>
    </div>

    <script>
        // Update datetime
        function updateDateTime() {
            const now = new Date();
            const datetime = now.toLocaleString('en-US', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
            document.getElementById('datetime').textContent = datetime;
        }
        setInterval(updateDateTime, 1000);
        updateDateTime();
        
        // Color conversion functions
        function hexToRgb(hex) {
            const r = parseInt(hex.slice(1, 3), 16);
            const g = parseInt(hex.slice(3, 5), 16);
            const b = parseInt(hex.slice(5, 7), 16);
            return `${r}, ${g}, ${b}`;
        }
        
        function hexToCmyk(hex) {
            let r = parseInt(hex.slice(1, 3), 16) / 255;
            let g = parseInt(hex.slice(3, 5), 16) / 255;
            let b = parseInt(hex.slice(5, 7), 16) / 255;
            
            let k = 1 - Math.max(r, g, b);
            let c = (1 - r - k) / (1 - k);
            let m = (1 - g - k) / (1 - k);
            let y = (1 - b - k) / (1 - k);
            
            c = Math.round(c * 100);
            m = Math.round(m * 100);
            y = Math.round(y * 100);
            k = Math.round(k * 100);
            
            return `${c}, ${m}, ${y}, ${k}`;
        }
        
        function getRandomPantone() {
            const prefixes = ['PMS', 'Pantone'];
            const numbers = Math.floor(Math.random() * 3000) + 1000;
            const suffixes = ['C', 'U', 'M', 'CP'];
            const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
            return `${prefixes[0]} ${numbers} ${suffix}`;
        }
        
        // Generate realistic pigment formula based on color
        function generatePigmentFormula(hex) {
            // Extract RGB components
            const r = parseInt(hex.slice(1, 3), 16);
            const g = parseInt(hex.slice(3, 5), 16);
            const b = parseInt(hex.slice(5, 7), 16);
            
            // Determine color characteristics
            const isBlue = b > r && b > g;
            const isRed = r > g && r > b;
            const isGreen = g > r && g > b;
            const isYellow = r > 200 && g > 150 && b < 100;
            const isDark = (r + g + b) < 300;
            const isLight = (r + g + b) > 600;
            
            // Base formula components
            let formula = [];
            let base = "Water-based acrylic resin";
            
            // Add white pigment for light colors
            if (isLight) {
                formula.push({name: "Titanium Dioxide", percent: Math.min(70, 30 + Math.floor(r/5))});
            }
            
            // Color-specific pigments
            if (isBlue) {
                formula.push({name: "Phthalo Blue", percent: Math.min(50, 20 + Math.floor(b/10))});
                if (g > 100) {
                    formula.push({name: "Phthalo Green", percent: Math.min(20, Math.floor(g/15))});
                }
                if (isDark) {
                    formula.push({name: "Carbon Black", percent: Math.min(10, Math.floor((255-b)/30))});
                }
            } 
            else if (isRed) {
                formula.push({name: "Quinacridone Red", percent: Math.min(50, 20 + Math.floor(r/10))});
                if (g > 100) {
                    formula.push({name: "Hansa Yellow", percent: Math.min(20, Math.floor(g/15))});
                }
                if (isDark) {
                    formula.push({name: "Carbon Black", percent: Math.min(10, Math.floor((255-r)/30))});
                }
            }
            else if (isGreen) {
                formula.push({name: "Phthalo Green", percent: Math.min(50, 20 + Math.floor(g/10))});
                if (r > 100) {
                    formula.push({name: "Quinacridone Red", percent: Math.min(15, Math.floor(r/20))});
                }
                if (isDark) {
                    formula.push({name: "Carbon Black", percent: Math.min(10, Math.floor((255-g)/30))});
                }
            }
            else if (isYellow) {
                formula.push({name: "Hansa Yellow", percent: Math.min(60, 30 + Math.floor((r+g)/15))});
                if (b > 50) {
                    formula.push({name: "Phthalo Blue", percent: Math.min(15, Math.floor(b/20))});
                }
            }
            else {
                // Neutral/gray colors
                const grayValue = (r + g + b) / 3;
                formula.push({name: "Titanium Dioxide", percent: Math.min(70, Math.floor(grayValue/4))});
                formula.push({name: "Carbon Black", percent: Math.min(20, Math.floor((255-grayValue)/15))});
            }
            
            // Add extender
            const totalPigment = formula.reduce((sum, item) => sum + item.percent, 0);
            const extenderPercent = Math.max(0, 100 - totalPigment - 5);
            if (extenderPercent > 0) {
                formula.push({name: "Extender", percent: extenderPercent});
            }
            
            // Normalize to 100%
            const currentTotal = formula.reduce((sum, item) => sum + item.percent, 0);
            const adjustment = 100 - currentTotal;
            if (adjustment !== 0) {
                formula[0].percent += adjustment;
            }
            
            // Round percentages
            formula.forEach(item => {
                item.percent = Math.round(item.percent);
            });
            
            return {formula, base};
        }
        
        // Update color specifications and formula
        function updateColorSpecs(hex) {
            document.getElementById('hexValue').textContent = hex;
            document.getElementById('rgbValue').textContent = hexToRgb(hex);
            document.getElementById('cmykValue').textContent = hexToCmyk(hex);
            document.getElementById('pantoneValue').textContent = getRandomPantone();
            
            // Update pigment formula
            const {formula, base} = generatePigmentFormula(hex);
            let formulaHTML = '';
            formula.forEach(item => {
                formulaHTML += `<p>• ${item.name}: ${item.percent}%</p>`;
            });
            formulaHTML += `<p class="mt-2 text-xs opacity-70">Base: ${base}</p>`;
            document.getElementById('formulaContent').innerHTML = formulaHTML;
        }
        
        // Generate similar colors
        function generateSimilarColors(baseHex, count = 5) {
            const baseR = parseInt(baseHex.slice(1, 3), 16);
            const baseG = parseInt(baseHex.slice(3, 5), 16);
            const baseB = parseInt(baseHex.slice(5, 7), 16);
            
            const colors = [];
            const tolerance = parseInt(document.getElementById('tolerance').value) / 100;
            
            for (let i = 0; i < count; i++) {
                // Generate color within tolerance range
                const r = Math.max(0, Math.min(255, 
                    baseR + Math.floor((Math.random() * 100 * tolerance) - (50 * tolerance))));
                const g = Math.max(0, Math.min(255, 
                    baseG + Math.floor((Math.random() * 100 * tolerance) - (50 * tolerance))));
                const b = Math.max(0, Math.min(255, 
                    baseB + Math.floor((Math.random() * 100 * tolerance) - (50 * tolerance))));
                
                const hex = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
                colors.push(hex);
            }
            
            return colors;
        }
        
        // Generate completely random colors
        function generateRandomColors(count = 5) {
            const colors = [];
            for (let i = 0; i < count; i++) {
                const hex = `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;
                colors.push(hex);
            }
            return colors;
        }
        
        // Generate shade cards
        function generateShadeCards(baseHex) {
            const baseR = parseInt(baseHex.slice(1, 3), 16);
            const baseG = parseInt(baseHex.slice(3, 5), 16);
            const baseB = parseInt(baseHex.slice(5, 7), 16);
            
            // Generate standard, light and dark shades
            const standardHex = baseHex;
            
            // Light shade (increase brightness)
            const lightR = Math.min(255, baseR + 40);
            const lightG = Math.min(255, baseG + 40);
            const lightB = Math.min(255, baseB + 40);
            const lightHex = `#${lightR.toString(16).padStart(2, '0')}${lightG.toString(16).padStart(2, '0')}${lightB.toString(16).padStart(2, '0')}`;
            
            // Dark shade (decrease brightness)
            const darkR = Math.max(0, baseR - 40);
            const darkG = Math.max(0, baseG - 40);
            const darkB = Math.max(0, baseB - 40);
            const darkHex = `#${darkR.toString(16).padStart(2, '0')}${darkG.toString(16).padStart(2, '0')}${darkB.toString(16).padStart(2, '0')}`;
            
            return [
                {name: "Standard", hex: standardHex},
                {name: "Light", hex: lightHex},
                {name: "Dark", hex: darkHex}
            ];
        }
        
        // Update palette display
        function updatePalette(colors) {
            const paletteContainer = document.getElementById('colorPalette');
            paletteContainer.innerHTML = '';
            
            colors.forEach(color => {
                const colorCard = document.createElement('div');
                colorCard.className = 'color-card h-16 rounded-lg flex items-end p-3 transition-all duration-200';
                colorCard.style.backgroundColor = color;
                
                const colorLabel = document.createElement('div');
                colorLabel.className = 'text-xs bg-white bg-opacity-80 px-2 py-1 rounded';
                colorLabel.innerHTML = `<span class="font-mono">${color}</span>`;
                
                colorCard.appendChild(colorLabel);
                paletteContainer.appendChild(colorCard);
            });
            
            document.getElementById('paletteCount').textContent = `${colors.length} colors`;
            
            // Update shade cards for the first color
            const shadeCards = generateShadeCards(colors[0]);
            const shadeContainer = document.getElementById('shadeCards');
            shadeContainer.innerHTML = '';
            
            shadeCards.forEach(shade => {
                const shadeCard = document.createElement('div');
                shadeCard.className = 'border border-gray-200 rounded-lg overflow-hidden';
                shadeCard.innerHTML = `
                    <div class="h-24" style="background-color: ${shade.hex};"></div>
                    <div class="p-3">
                        <p class="text-xs font-medium">${shade.name}</p>
                        <p class="text-xs opacity-70 font-mono">${shade.hex}</p>
                    </div>
                `;
                shadeContainer.appendChild(shadeCard);
            });
        }
        
        // Add to console
        function addConsoleMessage(message) {
            const console = document.getElementById('console');
            const p = document.createElement('p');
            p.textContent = `> ${message}`;
            console.appendChild(p);
            console.scrollTop = console.scrollHeight;
        }
        
        // Event listeners
        document.getElementById('baseColor').addEventListener('input', function() {
            const hex = this.value;
            updateColorSpecs(hex);
            addConsoleMessage(`Base color changed to ${hex} (secure input)`);
        });
        
        document.getElementById('tolerance').addEventListener('input', function() {
            document.getElementById('toleranceValue').textContent = `${this.value}%`;
        });
        
        document.getElementById('matchBtn').addEventListener('click', function() {
            const baseHex = document.getElementById('baseColor').value;
            const similarColors = generateSimilarColors(baseHex);
            updatePalette([baseHex, ...similarColors]);
            addConsoleMessage(`Generated matching colors for ${baseHex} with ${document.getElementById('tolerance').value}% tolerance`);
        });
        
        document.getElementById('generateBtn').addEventListener('click', function() {
            const baseHex = document.getElementById('baseColor').value;
            const variants = generateSimilarColors(baseHex, 10);
            updatePalette(variants);
            addConsoleMessage(`Generated 10 industrial color variants from ${baseHex}`);
        });
        
        document.getElementById('randomBtn').addEventListener('click', function() {
            const randomColors = generateRandomColors(5);
            const randomHex = randomColors[0];
            document.getElementById('baseColor').value = randomHex;
            updateColorSpecs(randomHex);
            updatePalette(randomColors);
            addConsoleMessage(`Randomized color palette generated with new formula`);
        });
        
        document.getElementById('saveBtn').addEventListener('click', function() {
            addConsoleMessage(`Formula saved to secure database (AES-256 encrypted)`);
        });
        
        // Initialize
        updateColorSpecs('#3b82f6');
    </script>
</body>
</html>